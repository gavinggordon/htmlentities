{
  "name": "Htmlentities",
  "tagline": "A PHP class which allows the decoding and encoding of a wider variety of characters compared to the standard htmlentities and html_entity_decode functions.",
  "body": "# HtmlEntities v4.1\r\n\r\n[![Build Status](https://travis-ci.org/gavinggordon/htmlentities.svg?branch=master)](https://travis-ci.org/gavinggordon/htmlentities)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/57305cbea0ca350034be70f7/badge.svg?style=flat)](https://www.versioneye.com/user/projects/57305cbea0ca350034be70f7)\r\n\r\n--------------\r\n\r\n## Prologue\r\n\r\nThe ability to encode and decode a certain set of characters called 'Html Entities' has existed since PHP4. Amongst the vast number of functions built into PHP, there are 4 nearly identical functions that are used to encode and decode html entities; despite their similarities, however, 2 of them do provide additional capabilities not available to the others.\r\n\r\n\r\n| Encoding Functions | Decoding Functions |\r\n|--------------|--------------|\r\n| htmlentities&sup1; | html_entity_decode&sup1; | \r\n| htmlspecialchars&sup2; | htmlspecialchars_decode&sup2; |\r\n\r\n\r\n__&sup1;__ *htmlentities and html_entity_decode can only encode and decode characters within PHP's HTML translations table.*\r\n\r\n__&sup2;__ *htmlspecialchars and htmlspecialchars_decode can only encode and decode special characters&sup3;.*\r\n\r\n__&sup3;__ *special characters are not interpreted as HTML tags and 8-bit characters are encoded as ASCII characters only.*\r\n\r\n--------------\r\n\r\n## What Sets This Apart\r\n \r\nWhat sets this class apart from the rest is that this class, in addition to being able to encode and decode all of the same characters/entities that can be encoded and decoded by PHP's htmlentities() and html_entity_decode() functions, it can also encode and decode a very large number of characters/entities which PHP's built-in htmlentities encoding and decoding functions won't encode/decode, due to their lack of special meaning in HTML, like:\r\n\r\n - punctuation characters;\r\n - ASCII characters;\r\n - Greek characters;\r\n - Latin characters;\r\n - Russian characters;\r\n - Arithmetic characters;\r\n - and tons more...\r\n\r\n--------------\r\n\r\n## Quick Class Overview\r\n\r\n__Encoding__\r\n    \r\n      use \\GGG\\HtmlEntities as HtmlEntities;\r\n      $to_encode = 'String of values to encode.';\r\n      $htmlentities = new HtmlEntities();\r\n      $encoded = $htmlentities->encode( $to_encode );\r\n      echo $encoded;\r\n    \r\n\r\n__Decoding__\r\n    \r\n      use \\GGG\\HtmlEntities as HtmlEntities;\r\n      $to_decode = 'String of values to decode.';\r\n      $htmlentities = new HtmlEntities();\r\n      $decoded = $htmlentities->decode( $to_decode );\r\n      echo $decoded;\r\n    \r\n\r\n--------------\r\n\r\n### Installation (via Composer)\r\n\r\n      composer require gavinggordon/htmlentities\r\n\r\n### Include autoloader.php\r\n\r\n      include_once( __DIR__ . '/vendor/autoload.php' );\r\n    \r\n### Instantiation\r\n\r\n      $htmlentities = new \\GGG\\HtmlEntities();\r\n\r\n### Examples\r\n\r\n#### Encoding:\r\n\r\n    \r\n      $to_encode = 'Test-,;:';\r\n      // Set a variable containing a string of the encoded\r\n      // characters you wish to be encoded;\r\n    \r\n      $encoded = $htmlentities->encode( $to_encode );\r\n      // Get the encoded result by using the encode method\r\n      // on the returned instance of HtmlEntities;\r\n    \r\n      echo $encoded;\r\n      // Display the encoded result, which is of type String;\r\n      // Test&amp;hyphen;&amp;comma;&amp;semi;&amp;colon;\r\n    \r\n\r\n#### Decoding:\r\n\r\n    \r\n      $to_decode = 'Test&amp;tilde;&amp;ast;&amp;lpar;&amp;num;';\r\n      // Set a variable containing a string of the encoded\r\n      // characters you wish to be decoded;\r\n    \r\n      $decoded = $htmlentities->decode( $to_decode );\r\n      // Get the decoded result by using the decode method\r\n      // on the returned instance of HtmlEntities;\r\n    \r\n      echo $decoded;\r\n      // Display the decoded result, which is of type String;\r\n      // Test~*(#\r\n    \r\n\r\n--------------\r\n\r\n#### More Information\r\n\r\n##### CodeClimate\r\n\r\nCheck out our [CodeClimate](https://codeclimate.com) stats by [clicking here](https://codeclimate.com/github/gavinggordon/htmlentities).\r\n\r\n##### PHP Innovation Award\r\n\r\nThis [class](http://www.phpclasses.org/package/9698.html) has been nominated for a PHP Innovation Award, provided by [PHPClasses.org](http://www.phpclasses.org). If you found [this class](http://www.phpclasses.org/package/9698.html) to be at all interesting, helpful, particularly useful, or innovative in any way, please [vote](http://www.phpclasses.org/vote.html) for it, to show your support for [this](http://www.phpclasses.org/package/9698.html) or any other PHP classes accessible online via my [GitHub profile](https://github.com/gavinggordon) or [PHPClasses.org profile](http://www.phpclasses.org/browse/author/1348645.html).\r\n\r\n--------------\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}